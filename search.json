[{"path":"https://usaid-oha-si.github.io/gisr/articles/create-terrain-basemap.html","id":"terrain-basemap-for-thematic-mapping","dir":"Articles","previous_headings":"","what":"Terrain Basemap for thematic mapping","title":"Create Terrain Basemap","text":"Thematic maps single-topics maps focus spatial variability specific distribution. USAID’s Office HIV/AIDs, ’ve used thematic maps visualize spatial distibution HIV/AIDs Programs’ key indicators PSNU level. ART Saturation Nigeria psnu level good example one thematic maps. countries, HIV/AIDs programs implemented specific districts USAID, creating thematic map usually leads deal empty states. compensate non-presence districts, used terrain rasterlayer basemap. basemaps generated way hillshape used beautifier map. go creating basemaps using Nigeria country focus. Let’s extract country boundary states boundaries. country map look like?  states map look like?  Let’s create basemap Nigeria. , need downlaod raster file si_path(\"path_raster\") option uses rnaturalearth extract admin0 admin1 boundaries sf objects.  also provide admins boundaries. classic case official country names don’t match rnaturalearth names. Tanzania good example country name United Republic Tanzania.  also decide use country boundaries  ’s also possible add neighbor countries basemap. See .","code":"library(dplyr)         # General data munging and visualisation library(ggplot2)       # General plotting library(gisr)          # OHA/SI in house package used to create these basemap library(sf)            # Spatial data management library(glitr)         # OHA/SI in house package used to help standardize viz countryname <- \"Nigeria\"  adm0 <- gisr::get_admin0(countries = countryname) %>%    dplyr::select(admin)  adm1 <- gisr::get_admin1(countries = countryname) %>%    dplyr::select(name) adm0 %>% gisr::gview() adm1 %>%    gisr::gview() +    ggplot2::geom_sf_text(data = adm1, ggplot2::aes(label = name), size = 3) terrain_map(countries = countryname,              mask = TRUE,             glamr::si_path(\"path_raster\")) terrain_map(countries = adm0,             adm0 = adm0,             adm1 = adm1,             terr = glamr::si_path(\"path_raster\")) terrain_map(countries = adm0,             adm0 = adm0,             terr = glamr::si_path(\"path_raster\")) ras <- glamr::si_path(\"path_raster\")  terrain_map(countries = adm0,             adm0 = adm0,             adm1 = adm1,             add_neighbors = TRUE,             add_labels = TRUE,             terr = ras)"},{"path":"https://usaid-oha-si.github.io/gisr/articles/extract-facilities.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Extract facilities location data","text":"vignette provides guidance USAID/OHA PEPFAR Data Analysts extract location data PEPFAR supported facilities","code":""},{"path":"https://usaid-oha-si.github.io/gisr/articles/extract-facilities.html","id":"facilities-location-datasets","dir":"Articles","previous_headings":"","what":"Facilities location datasets","title":"Extract facilities location data","text":"PEPFAR uses DATIM Global HIV/AIDS Programs data management. Supported health facilities location data also managed data management system. facility Universal Unique Identifier (UUID), parent organizational units UIDs latitude / longitude site. one many ways extract PEPFAR facilities location data specific countries.","code":""},{"path":"https://usaid-oha-si.github.io/gisr/articles/extract-facilities.html","id":"prerequisites","dir":"Articles","previous_headings":"","what":"Prerequisites","title":"Extract facilities location data","text":"","code":"library(tidyverse)     # General data management and viz library library(glamr)         # OHA/SI utility package library(gisr)          # OHA/SI geospatial package  library(sf)            # Spatial data management library(sp)            # Spatial data management library(glue)          # String formatting"},{"path":"https://usaid-oha-si.github.io/gisr/articles/extract-facilities.html","id":"workspace","dir":"Articles","previous_headings":"","what":"Workspace","title":"Extract facilities location data","text":"jumping data extraction, recommend preparing directory host data. best directory type data OHA/Vector path. Follow steps.","code":"# Define a folder to host data - Using FY dir_sites <- Sys.Date() %>%     glamr::convert_date_to_qtr() %>%     str_sub(1, 4)  dir_data <- glamr::si_path(\"path_vector\") %>%   paste0(\"../\", .) %>% # This needed only with R Markdown files   paste0(\"/OU-Sites/\", dir_sites)  # Create the folder dir.create(dir_data)  dir_geodata <- paste0(dir_data, \"/SHP\")  dir.create(dir_geodata)"},{"path":"https://usaid-oha-si.github.io/gisr/articles/extract-facilities.html","id":"data-extraction","dir":"Articles","previous_headings":"","what":"Data Extraction","title":"Extract facilities location data","text":"2 key information needed facility data extraction: . OU/Country name, b. Organizational level Facilities Now ’s time proceed facilities data extraction Save extracted data .csv file pre-defined location","code":"ou <- \"Nigeria\" level_fac <- get_ouorglevel(operatingunit = ou, org_type = \"facility\") # extract location data df_facs <- extract_locations(country = ou, level = level_fac)  # Get a clean version of the facilities df_facs <- df_facs %>% extract_facilities()  # Get ride of extract columns df_facs <- df_facs %>% select(-c(geom_type:nested)) write_csv(x = df_facs,            file = paste0(dir_data, \"/\", ou,                          \" - facilities_locations_extract_\",                          format(Sys.Date(), \"%Y-%m-%d\"), \".csv\"),            na = \"\")"},{"path":"https://usaid-oha-si.github.io/gisr/articles/extract-facilities.html","id":"convert-extracted-location-data-into-a-shapefile","dir":"Articles","previous_headings":"","what":"Convert Extracted location data into a shapefile","title":"Extract facilities location data","text":"csv files good data analyses time one need location data shapefile format. generate shapefile .csv file. Save shapefile pre-define directory Give try let us know went. Enjoy!","code":"# By default, location information is stored in these 2 columns loc_cols <- c(\"latitude\", \"longitude\")  # create a spatial dataframe - excluding data with no validate lat/long spdf <- df_facs %>%   filter(across(all_of(loc_cols), ~ !is.na(.x))) %>%   mutate(across(all_of(loc_cols), ~ as.numeric(.x)))  # Make sure the Coofinate Reference System is in WGS 84 spdf <- spdf %>% st_as_sf(coords = loc_cols, crs = st_crs(4326))  # Shapefiles columns have a max length spdf <- spdf %>%   rename(ou_iso = operatingunit_iso,          ou = operatingunit,          cntry_iso = countryname_iso,          cntry = countryname) export_spdf(spdf = spdf,             name = paste0(dir_geodata, \"/\", ou,                           \" - facilities_locations_\",                           format(Sys.Date(), \"%Y-%m-%d\")))"},{"path":"https://usaid-oha-si.github.io/gisr/articles/extract-geodata.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Extract Geodata from different sources","text":"vignette provides guidance USAID/OHA Data Analysts extract geospatial data different sources","code":""},{"path":"https://usaid-oha-si.github.io/gisr/articles/extract-geodata.html","id":"geospatial-datasets","dir":"Articles","previous_headings":"","what":"Geospatial Datasets","title":"Extract Geodata from different sources","text":"PEPFAR/ICPI GIS Cluster provides global geospatial data set define boundaries PEPFAR countries organizational units. data set contains country, SNU, PSNU Community boundaries along respective unique identification id (uid) used thematic mapping spatial analyses. external data sources Naturalearh GADM also helpful. different ways analysts / using package extract PEPFAR geodata respective countries.","code":""},{"path":"https://usaid-oha-si.github.io/gisr/articles/extract-geodata.html","id":"prerequisites","dir":"Articles","previous_headings":"","what":"Prerequisites","title":"Extract Geodata from different sources","text":"","code":"library(glamr)         # OHA/SI utility package library(gisr)          # OHA/SI geospatial package  library(sf)            # Spatial data management"},{"path":"https://usaid-oha-si.github.io/gisr/articles/extract-geodata.html","id":"locate-and-setup-vector-data-path","dir":"Articles","previous_headings":"","what":"Locate and setup vector data path","title":"Extract Geodata from different sources","text":"Current PEPFAR Geospatial data sets can found OHA/SI Google Drive SI Folder Spatial Files sub-folder. order take full advantage OHA/SI R packages, ’s recommended setup location data directories. ideally outside github projects directory. One directories dedicated geospatial data set using glamr::set_paths(folderpath_vector = \"<-geodata-folder>\"). example. assumes R / Github projects folder Documents folder local computer working R Project sub-folder. example, geospatial data folder sibling R / Github projects folder. geospatial data path now set. Download PEPFAR VcPepfarPolygons.shp file mentioned Google Drive newly set local folder.","code":"curr_path <- \"C:/Users/<username>/Documents/projects/gisr\" # Windows #or  #curr_path <- \"~/Documents/projects/gisr\"                  # Mac or linux  geopath <- \"../../Geodata\"  glamr::set_paths(folderpath_vector = geopath)  # verify path glamr::si_path(type = \"path_vector\")"},{"path":"https://usaid-oha-si.github.io/gisr/articles/extract-geodata.html","id":"read-geospatial-data","dir":"Articles","previous_headings":"","what":"Read geospatial data","title":"Extract Geodata from different sources","text":"Time test gisr functions. Let Now PEPFAR Boundaries shapefile can accessed read R, one extract specific boundaries countries?","code":"# this works for the perfect setup with the default parameters values spdf_pepfar <- get_vcpolygons(folderpath = geopath)   # for custom use, you will need to specify the path and name of the file spdf_pepfar <- get_vcpolygons(folderpath = \"../myshapefiles\", name = \"pepfar.shp\")  # Explore outputs spdf_pepfar %>% glimpse()  spdf_pepfar"},{"path":"https://usaid-oha-si.github.io/gisr/articles/extract-geodata.html","id":"extract-country-orgunit-boundaries","dir":"Articles","previous_headings":"","what":"Extract country orgunit boundaries","title":"Extract Geodata from different sources","text":"order extract country specific boundaries, need provide country name orgunit level. example South Africa. Extract country boundaries Extract PSNU boundaries Extract country boundaries","code":"cntry <- \"South Africa\" cntry_lvl <- grabr::get_ouorglevel(   operatingunit = cntry,   country = cntry,   org_type = \"country\",   username = datim_user(),   password = datim_pwd() )  # Country boundaries spdf_cntry <- spdf_pepfar %>%    extract_boundaries(country = cntry,                       level = cntry_lvl,                      username = datim_user(),                      password = datim_pwd())  spdf_cntry psnu_lvl <- grabr::get_ouorglevel(   operatingunit = cntry,   country = cntry,   org_type = \"prioritization\",   username = datim_user(),   password = datim_pwd() )  # psnu boundaries spdf_psnu <- spdf_pepfar %>%    extract_boundaries(country = cntry,                       level = cntry_lvl,                      username = datim_user(),                      password = datim_pwd())  spdf_psnu spdf_all <- cntry_polygons(spdf = spdf_pepfar, cntry = cntry)  spdf_all$country spdf_all$snu1 spdf_all$prioritization spdf_all$community"},{"path":"https://usaid-oha-si.github.io/gisr/articles/extract-geodata.html","id":"download-pre-parsed-geodata","dir":"Articles","previous_headings":"","what":"Download pre-parsed geodata","title":"Extract Geodata from different sources","text":"PEPFAR Geospatial dataset already parsed can downloaded local directory.","code":"# Download country boundaries download_shapefiles(country = cntry, org_label = \"country\")  # Download PSNU boundaries download_shapefiles(country = cntry, org_label = \"prioritization\")"},{"path":"https://usaid-oha-si.github.io/gisr/articles/extract-geodata.html","id":"extract-data-from-other-sources","dir":"Articles","previous_headings":"","what":"Extract Data from other sources","title":"Extract Geodata from different sources","text":"Contextual geospatial data sets can also extracted external sources using get_admin0(), get_admin1(), get_adm_boundaries()","code":""},{"path":"https://usaid-oha-si.github.io/gisr/articles/extract-geodata.html","id":"export-geospatial-data-to-local-drive","dir":"Articles","previous_headings":"","what":"Export Geospatial Data to local drive","title":"Extract Geodata from different sources","text":"Take look spdf_export()","code":""},{"path":[]},{"path":"https://usaid-oha-si.github.io/gisr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Baboyma Kagniniwa. Author, maintainer.","code":""},{"path":"https://usaid-oha-si.github.io/gisr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kagniniwa B (2024). gisr: Geospatial Analytics Utility functions. R package version 0.4.0, https://usaid-oha-si.github.io/gisr/, https://github.com/USAID-OHA-SI/gisr.","code":"@Manual{,   title = {gisr: Geospatial Analytics Utility functions},   author = {Baboyma Kagniniwa},   year = {2024},   note = {R package version 0.4.0, https://usaid-oha-si.github.io/gisr/},   url = {https://github.com/USAID-OHA-SI/gisr}, }"},{"path":"https://usaid-oha-si.github.io/gisr/index.html","id":"gisr-","dir":"","previous_headings":"","what":"Geospatial Analytics Utility functions","title":"Geospatial Analytics Utility functions","text":"Geospatial Analytics Utilities","code":""},{"path":"https://usaid-oha-si.github.io/gisr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Geospatial Analytics Utility functions","text":"gisr CRAN, install directly rOpenSci GitHub using code found .","code":"## SETUP      # Pre-requisits - gisr user rnaturalearthdata and rnaturalearthhires      remotes::install_github(\"ropensci/rnaturalearth\")     remotes::install_github(\"ropensci/rnaturalearthhires\")    #install from rOpenSci     install.packages('gisr', repos = c('https://usaid-oha-si.r-universe.dev', 'https://cloud.r-project.org'))        #alt: install from GitHub using pak     #install.packages(\"pak\")     #pak::pak(\"USAID-OHA-SI/gisr\")        #load the package     library(gisr)  ## LIST TYPES OF STYLES INCLUDED WITH PACKAGE   ls(\"package:gisr\")"},{"path":"https://usaid-oha-si.github.io/gisr/index.html","id":"get-administrative-boundaries","dir":"","previous_headings":"","what":"Get administrative boundaries","title":"Geospatial Analytics Utility functions","text":"Admin boundaries + neighbor countries data Natural Earth Data","code":"library(tidyverse) library(sf) library(gisr)   zambia0 <- get_admin0(\"Zambia\")  zambia1 <- get_admin1(\"Zambia\")   zambia_neighbors <- geo_neighbors(\"Zambia\")   ggplot(data = zambia_neighbors) +         geom_sf(fill = NA) +         geom_sf(data = zambia1, fill = gray(.92), lty = \"dashed\") +         geom_sf(data = zambia0, fill = NA) +         geom_sf_text(aes(label = sovereignt), size = 3) +         theme_void()"},{"path":"https://usaid-oha-si.github.io/gisr/index.html","id":"plot-a-terrain-map","dir":"","previous_headings":"","what":"Plot a terrain map","title":"Geospatial Analytics Utility functions","text":"Create terrain map vector + raster data local DEM Tiff file","code":"library(tidyverse) library(sf) library(gisr)  dem_dir <- \"./GIS\"  z_map1 <- terrain_map(\"Zambia\", terr_path = dir_terr)  print(z_map1)  z_map2 <- terrain_map(\"Zambia\", terr_path = dir_terr, add_neighbors = TRUE)       print(z_map2)"},{"path":"https://usaid-oha-si.github.io/gisr/index.html","id":"plot-an-admin-map","dir":"","previous_headings":"","what":"Plot an admin map","title":"Geospatial Analytics Utility functions","text":"Create administrative map vector data RNaturalEarth","code":"library(systemfonts) library(tidyverse) library(sf) library(glitr) library(gisr)  z_map1 <- admins_map(\"Zambia\")  print(z_map1)  z_map2 <- admins_map(\"Zambia\", add_neighbors = TRUE)       print(z_map2)"},{"path":"https://usaid-oha-si.github.io/gisr/index.html","id":"apply-si-style-guide-to-maps","dir":"","previous_headings":"","what":"Apply SI Style Guide to maps","title":"Geospatial Analytics Utility functions","text":"Create administrative map vector data RNaturalEarth apply SI Style image Disclaimer: findings, interpretation, conclusions expressed herein authors necessarily reflect views United States Agency International Development. errors remain .","code":"library(systemfonts) library(tidyverse) library(gisr) library(sf) library(glitr)  sfdf <- gisr::get_admin1(\"Nigeria\") %>%  select(name) %>%  mutate(value = runif(nrow(.), 0, 1))  ggplot() +    geom_sf(data = sfdf,            aes(fill = value),            color = grey10k,            size = .1) +    scale_fill_si(palette = \"genoas\",                  discrete = FALSE,                  limits = c(0, 1),                  labels = scales::percent) +    labs(title = \"NIGERIA - % OF PLHIV BY STATE\",         subtitle = \"States from XYZ Region are the most hit by HIV/AIDS\",         caption = base::paste0(\"Produced by OHA/SIEI/SI, ON \", base::Sys.Date())) +   si_style_map()"},{"path":"https://usaid-oha-si.github.io/gisr/reference/admins_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate administrative boundaries map — admins_map","title":"Generate administrative boundaries map — admins_map","text":"Generate administrative boundaries map","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/admins_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate administrative boundaries map — admins_map","text":"","code":"admins_map(countries, add_neighbors = FALSE)"},{"path":"https://usaid-oha-si.github.io/gisr/reference/admins_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate administrative boundaries map — admins_map","text":"countries list countries map add_neighbors map include neighbor countries","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/admins_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate administrative boundaries map — admins_map","text":"ggplot admin map","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/admins_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate administrative boundaries map — admins_map","text":"","code":"if (FALSE) {  library(gisr)   admins_map(countries = list(\"Zambia\"))  admins_map(countries = list(\"Zambia\"), add_neighbors = TRUE) }"},{"path":"https://usaid-oha-si.github.io/gisr/reference/assess_facilities.html","id":null,"dir":"Reference","previous_headings":"","what":"Assess facility geo-location reporting levels — assess_facilities","title":"Assess facility geo-location reporting levels — assess_facilities","text":"Assess facility geo-location reporting levels","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/assess_facilities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assess facility geo-location reporting levels — assess_facilities","text":"","code":"assess_facilities(.data)"},{"path":"https://usaid-oha-si.github.io/gisr/reference/assess_facilities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assess facility geo-location reporting levels — assess_facilities","text":".data Datim organisation units data frame","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/assess_facilities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assess facility geo-location reporting levels — assess_facilities","text":"","code":"if (FALSE) { assess_facilities(df_sites) df_sites %>% assess_facilities() }"},{"path":"https://usaid-oha-si.github.io/gisr/reference/check_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Check columns length — check_columns","title":"Check columns length — check_columns","text":"Check columns length","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/check_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check columns length — check_columns","text":"","code":"check_columns(spdf)"},{"path":"https://usaid-oha-si.github.io/gisr/reference/check_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check columns length — check_columns","text":"spdf input spatial data frame","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/check_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check columns length — check_columns","text":"list columns 10 characters","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/cntry_polygons.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Country Polygons — cntry_polygons","title":"Extract Country Polygons — cntry_polygons","text":"Extract Country Polygons","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/cntry_polygons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Country Polygons — cntry_polygons","text":"","code":"cntry_polygons(spdf, cntry, attrs)"},{"path":"https://usaid-oha-si.github.io/gisr/reference/cntry_polygons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Country Polygons — cntry_polygons","text":"spdf VcPolygons data Spatial Data Frame cntry Country name attrs Country orgunits, output grabr::datim_orgunits(cntry, reshape = TRUE)","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/cntry_polygons.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Country Polygons — cntry_polygons","text":"list spatial data frames","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/cntry_polygons.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Country Polygons — cntry_polygons","text":"","code":"if (FALSE) {  cntry = \"Nigeria\"  spdf <- gisr::get_vcpolygons(path = glamr::si_path(\"path_vector\"), name = \"VcPepfarPolygons.shp\")  df_attrs <- grabr::get_attributes(cntry)  cntry_polygons(spdf = spdf, cntry = \"Zambia\", attrs = df_attrs)  }"},{"path":"https://usaid-oha-si.github.io/gisr/reference/download_shapefiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Download shapefile zipfile from googledrive — download_shapefiles","title":"Download shapefile zipfile from googledrive — download_shapefiles","text":"Download shapefile zipfile googledrive","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/download_shapefiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download shapefile zipfile from googledrive — download_shapefiles","text":"","code":"download_shapefiles(   country,   org_label = \"country\",   drive_folder = NULL,   dest_file = NULL,   overwrite = TRUE,   unzip = FALSE )"},{"path":"https://usaid-oha-si.github.io/gisr/reference/download_shapefiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download shapefile zipfile from googledrive — download_shapefiles","text":"country PEPFAR Countryname org_label Orgunit label, default set country drive_folder Googledrive id PEPFAR Spatial files dest_file Full file name download zipped shapefile overwrite process overwrite existing files unzip zipfile unzipped","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/download_shapefiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download shapefile zipfile from googledrive — download_shapefiles","text":"","code":"if (FALSE) {    cntry <- \"Zambia\"    download_shapefiles(country = cntry)    download_shapefiles(country = cntry, org_label = \"snu1\", unzip = TRUE)    download_shapefiles(country = cntry, org_label = \"psnu\", unzip = TRUE) }"},{"path":"https://usaid-oha-si.github.io/gisr/reference/dview.html","id":null,"dir":"Reference","previous_headings":"","what":"View attributes from simple feature object — dview","title":"View attributes from simple feature object — dview","text":"View attributes simple feature object","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/dview.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"View attributes from simple feature object — dview","text":"","code":"dview(geodata, console = FALSE)"},{"path":"https://usaid-oha-si.github.io/gisr/reference/dview.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"View attributes from simple feature object — dview","text":"geodata spatial data console view console? default false","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/dview.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"View attributes from simple feature object — dview","text":"","code":"if (FALSE) {  library(gisr)   adm0 <- get_admin0(\"Ghana\")   adm0 %>% dview(console = TRUE) }"},{"path":"https://usaid-oha-si.github.io/gisr/reference/explore_facilities.html","id":null,"dir":"Reference","previous_headings":"","what":"Explore facility locations — explore_facilities","title":"Explore facility locations — explore_facilities","text":"Explore facility locations","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/explore_facilities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Explore facility locations — explore_facilities","text":"","code":"explore_facilities(.data, cntry, terr_path = NULL)"},{"path":"https://usaid-oha-si.github.io/gisr/reference/explore_facilities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Explore facility locations — explore_facilities","text":".data Datim organisation units data frame cntry Country name terr_path Path terrain raster dataset","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/explore_facilities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Explore facility locations — explore_facilities","text":"","code":"if (FALSE) { explore_facilities(df_sites, cntry = \"saturn\") df_sites %>% explore_facilities(\"saturn\") }"},{"path":"https://usaid-oha-si.github.io/gisr/reference/export_spdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Save spatial data as shapefile — export_spdf","title":"Save spatial data as shapefile — export_spdf","text":"Save spatial data shapefile","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/export_spdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save spatial data as shapefile — export_spdf","text":"","code":"export_spdf(spdf, name)"},{"path":"https://usaid-oha-si.github.io/gisr/reference/export_spdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save spatial data as shapefile — export_spdf","text":"spdf sf object name filename full path","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/export_spdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save spatial data as shapefile — export_spdf","text":"boolean","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/export_spdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save spatial data as shapefile — export_spdf","text":"","code":"if (FALSE) {  library(gisr)  library(sf)   shp <- get_admin0(countries = \"Nigeria\")   export_spdf(spdf = shp, name = \"./GIS/nga_country_boundaries\")  export_spdf(spdf = shp, name = \"./GIS/nga_country_boundaries.shp\") }"},{"path":"https://usaid-oha-si.github.io/gisr/reference/extract_attributes.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Orgunit Boundaries Attributes — extract_attributes","title":"Extract Orgunit Boundaries Attributes — extract_attributes","text":"Extract Orgunit Boundaries Attributes","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/extract_attributes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Orgunit Boundaries Attributes — extract_attributes","text":"","code":"extract_attributes(   country,   username,   password,   folderpath,   prefix = \"orghierarchy\",   baseurl = NULL )"},{"path":"https://usaid-oha-si.github.io/gisr/reference/extract_attributes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Orgunit Boundaries Attributes — extract_attributes","text":"country OU/country username Datim username password Datim password folderpath Local directory files prefix Prefix filename baseurl Datim URL","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/extract_attributes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Orgunit Boundaries Attributes — extract_attributes","text":"df","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/extract_attributes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Orgunit Boundaries Attributes — extract_attributes","text":"","code":"if (FALSE) {  library(gisr)   extract_attributes(country = \"Nigeria\")  extract_attributes(country = \"Nigeria\", folderpath = glamr::si_path(\"path_vector\")) }"},{"path":"https://usaid-oha-si.github.io/gisr/reference/extract_boundaries.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract PEPFAR Orgunit Boundaries — extract_boundaries","title":"Extract PEPFAR Orgunit Boundaries — extract_boundaries","text":"PEPFAR VcPolygons shared orgunit uids , making hard analysts identify specific polygon orgunit level. function extract orgunt attributes Datim append global shapefile, allowing analysts filter work subset.","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/extract_boundaries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract PEPFAR Orgunit Boundaries — extract_boundaries","text":"","code":"extract_boundaries(   spdf,   country,   level = 3,   username,   password,   export = FALSE,   name = NULL )"},{"path":"https://usaid-oha-si.github.io/gisr/reference/extract_boundaries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract PEPFAR Orgunit Boundaries — extract_boundaries","text":"spdf PEPFAR Global Shapefile country Country name level Orgunit level username Datim username password Datim password export Export extract shapefile? name Export filename","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/extract_boundaries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract PEPFAR Orgunit Boundaries — extract_boundaries","text":"sf object orgunit attributes","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/extract_facilities.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract facility sites — extract_facilities","title":"Extract facility sites — extract_facilities","text":"Extract facility sites","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/extract_facilities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract facility sites — extract_facilities","text":"","code":"extract_facilities(.data)"},{"path":"https://usaid-oha-si.github.io/gisr/reference/extract_facilities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract facility sites — extract_facilities","text":".data Datim organisation units data frame - label coordinates columns","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/extract_facilities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract facility sites — extract_facilities","text":"","code":"if (FALSE) {   grabr::datim_pull_hierarchy(...) %>%     extract_facilities() }"},{"path":"https://usaid-oha-si.github.io/gisr/reference/extract_locations.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract location data — extract_locations","title":"Extract location data — extract_locations","text":"Extract location data","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/extract_locations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract location data — extract_locations","text":"","code":"extract_locations(   country,   username,   password,   level = NULL,   add_geom = TRUE,   baseurl = NULL )"},{"path":"https://usaid-oha-si.github.io/gisr/reference/extract_locations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract location data — extract_locations","text":"country PEPFAR Operating Unit Country name username Datim Account Username password Datim Account password level PEPFAR Org Level, optional add_geom Include geometry column, default value true baseurl Datim URL","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/extract_locations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract location data — extract_locations","text":"dataframe Null match","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/extract_locations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract location data — extract_locations","text":"","code":"if (FALSE) {  extract_locations(\"<saturn>\", \"<my_username>\", \"<my_password>\") }"},{"path":"https://usaid-oha-si.github.io/gisr/reference/extract_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract raster data for an AOI (Countries) — extract_raster","title":"Extract raster data for an AOI (Countries) — extract_raster","text":"Extract raster data AOI (Countries)","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/extract_raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract raster data for an AOI (Countries) — extract_raster","text":"","code":"extract_raster(countries, ras, mask = FALSE, buffer = 0.1)"},{"path":"https://usaid-oha-si.github.io/gisr/reference/extract_raster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract raster data for an AOI (Countries) — extract_raster","text":"countries List country names sf object ras RasterLayer Path raster file mask extracted data match exact boundary limits? buffer Extend AOI extent x","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/extract_raster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract raster data for an AOI (Countries) — extract_raster","text":"","code":"spdf spatial dataframe"},{"path":"https://usaid-oha-si.github.io/gisr/reference/extract_raster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract raster data for an AOI (Countries) — extract_raster","text":"","code":"if (FALSE) {  library(gisr)  library(sf)   get_terrain(countries = list(\"Zambia\"))  get_terrain(countries = list(\"Zambia\"), mask = TRUE)  get_terrain(countries = list(\"Zambia\"), buffer = .5, terr = \"../../HDX_Data\") }"},{"path":"https://usaid-oha-si.github.io/gisr/reference/extract_roads.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Road Network data from OSM — extract_roads","title":"Extract Road Network data from OSM — extract_roads","text":"Extract Road Network data OSM","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/extract_roads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Road Network data from OSM — extract_roads","text":"","code":"extract_roads(aoi, radius = NULL, clip = FALSE)"},{"path":"https://usaid-oha-si.github.io/gisr/reference/extract_roads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Road Network data from OSM — extract_roads","text":"aoi Area Interest sf object radius Buffer redius meters, default = 1000m clip output clipped AOI? Default FALSE","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/extract_roads.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Road Network data from OSM — extract_roads","text":"","code":"if (FALSE) {   library(gisr)   adm_zmb <- get_admin1(countries = \"Zambia\") %>%    dplyr::select(name) %>%    dplyr::filter(name == 'Lusaka')   adm_zmb %>%    extract_roads() %>%    gview() }"},{"path":"https://usaid-oha-si.github.io/gisr/reference/gattributes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get attributes from feature class — gattributes","title":"Get attributes from feature class — gattributes","text":"Get attributes feature class","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/gattributes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get attributes from feature class — gattributes","text":"","code":"gattributes(geodata)"},{"path":"https://usaid-oha-si.github.io/gisr/reference/gattributes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get attributes from feature class — gattributes","text":"geodata spatial data","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/gattributes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get attributes from feature class — gattributes","text":"","code":"attribures as data frame"},{"path":"https://usaid-oha-si.github.io/gisr/reference/gattributes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get attributes from feature class — gattributes","text":"","code":"if (FALSE) {  library(gisr)   # Admin level 0 [country] geodata  adm0 <- get_admin0(\"Ghana\")   # Extract attrs from geodata  .df <- gattributes(geodata = adm0)   head(.df) }"},{"path":"https://usaid-oha-si.github.io/gisr/reference/generate_facilities_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Report locations data completeness — generate_facilities_report","title":"Report locations data completeness — generate_facilities_report","text":"Report locations data completeness","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/generate_facilities_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Report locations data completeness — generate_facilities_report","text":"","code":"generate_facilities_report(   cntry,   user,   pass,   terr_path = NULL,   output_folder = NULL )"},{"path":"https://usaid-oha-si.github.io/gisr/reference/generate_facilities_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Report locations data completeness — generate_facilities_report","text":"cntry Country name user Datim account username pass Datim account password (glamr::mypwd recommended) terr_path Path terrain raster data output_folder Output folder","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/generate_facilities_report.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Report locations data completeness — generate_facilities_report","text":"","code":"if (FALSE) { generate_sites_report(cntry = \"saturn\", mer_sites = sites) }"},{"path":"https://usaid-oha-si.github.io/gisr/reference/geo_fence.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a buffer around an Area of Interest — geo_fence","title":"Generate a buffer around an Area of Interest — geo_fence","text":"Generate buffer around Area Interest","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/geo_fence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a buffer around an Area of Interest — geo_fence","text":"","code":"geo_fence(aoi, radius = 1000, append = TRUE)"},{"path":"https://usaid-oha-si.github.io/gisr/reference/geo_fence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a buffer around an Area of Interest — geo_fence","text":"aoi Area Interest sf object radius Buffer redius meters, default = 1000m append buffered area appended AOI? Default TRUE","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/geo_fence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a buffer around an Area of Interest — geo_fence","text":"simple feature class","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/geo_fence.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a buffer around an Area of Interest — geo_fence","text":"","code":"if (FALSE) {  library(gisr)   adm <- get_admin0(countries = \"Zambia\")   adm %>% geo_fence(radius = 5000, append = TRUE) %>% gview()   adm %>% geo_fence(radius = 5000, append = FALSE) %>% gview() }"},{"path":"https://usaid-oha-si.github.io/gisr/reference/geo_neighbors.html","id":null,"dir":"Reference","previous_headings":"","what":"Get neighbors of a given contry — geo_neighbors","title":"Get neighbors of a given contry — geo_neighbors","text":"Get neighbors given contry","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/geo_neighbors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get neighbors of a given contry — geo_neighbors","text":"","code":"geo_neighbors(src, countries, var = \"sovereignt\", crs = 4326, crop = FALSE)"},{"path":"https://usaid-oha-si.github.io/gisr/reference/geo_neighbors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get neighbors of a given contry — geo_neighbors","text":"src Source spatial data frame countries countries interest var Variable name crs Coordinates reference system, default WGS84 (EPGS:4326) crop Crop sfc focus countries extent?","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/geo_neighbors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get neighbors of a given contry — geo_neighbors","text":"","code":"simple feature class"},{"path":"https://usaid-oha-si.github.io/gisr/reference/geo_neighbors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get neighbors of a given contry — geo_neighbors","text":"","code":"if (FALSE) {  library(gisr)   cntry <- \"Zambia\"   shp_ne <- get_necountries()   # Country + neighbors boundaries  cntries <- geo_neighbors(src = shp_ne, countries = cntry)   # Country + neighbors boundaries: crop to country extent  cntries <- geo_neighbors(src = shp_ne, countries = cntry, crop = TRUE)   cntries %>% gview() }"},{"path":"https://usaid-oha-si.github.io/gisr/reference/get_admin0.html","id":null,"dir":"Reference","previous_headings":"","what":"Get admin level 0 boundary — get_admin0","title":"Get admin level 0 boundary — get_admin0","text":"sf boundaries data given country","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/get_admin0.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get admin level 0 boundary — get_admin0","text":"","code":"get_admin0(countries, scale = c(\"medium\", \"large\", \"small\"), crs = 4326)"},{"path":"https://usaid-oha-si.github.io/gisr/reference/get_admin0.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get admin level 0 boundary — get_admin0","text":"countries list country names scale spatial resolution geodata crs coordinates reference system","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/get_admin0.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get admin level 0 boundary — get_admin0","text":"","code":"simple feature class"},{"path":"https://usaid-oha-si.github.io/gisr/reference/get_admin0.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get admin level 0 boundary — get_admin0","text":"","code":"if (FALSE) {   library(gisr)    get_admin0(countries = list(\"Zambia\")) }"},{"path":"https://usaid-oha-si.github.io/gisr/reference/get_admin1.html","id":null,"dir":"Reference","previous_headings":"","what":"Get admin level 1 boundaries — get_admin1","title":"Get admin level 1 boundaries — get_admin1","text":"sf boundaries data given country","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/get_admin1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get admin level 1 boundaries — get_admin1","text":"","code":"get_admin1(countries, crs = 4326)"},{"path":"https://usaid-oha-si.github.io/gisr/reference/get_admin1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get admin level 1 boundaries — get_admin1","text":"countries list country names crs coordinates reference system","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/get_admin1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get admin level 1 boundaries — get_admin1","text":"simple feature class","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/get_admin1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get admin level 1 boundaries — get_admin1","text":"","code":"if (FALSE) {  library(gisr)   get_admin1(countries = list(\"Zambia\")) }"},{"path":"https://usaid-oha-si.github.io/gisr/reference/get_attributes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Attributes Data for Orgunit Boundaries — get_attributes","title":"Get Attributes Data for Orgunit Boundaries — get_attributes","text":"Get Attributes Data Orgunit Boundaries","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/get_attributes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Attributes Data for Orgunit Boundaries — get_attributes","text":"","code":"get_attributes(   country,   username,   password,   folderpath = NULL,   search = \"orghierarchy\",   baseurl = NULL )"},{"path":"https://usaid-oha-si.github.io/gisr/reference/get_attributes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Attributes Data for Orgunit Boundaries — get_attributes","text":"country OU/country username Datim username password Datim password folderpath Local directory files search Search keyword baseurl Datim URL","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/get_attributes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Attributes Data for Orgunit Boundaries — get_attributes","text":"","code":"OU Orgunit level as df"},{"path":"https://usaid-oha-si.github.io/gisr/reference/get_attributes.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get Attributes Data for Orgunit Boundaries — get_attributes","text":"attempt read data local directory folderpath set null. null, username password required","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/get_attributes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Attributes Data for Orgunit Boundaries — get_attributes","text":"","code":"if (FALSE) {  library(gisr)   get_attributes(country = \"Nigeria\") }"},{"path":"https://usaid-oha-si.github.io/gisr/reference/get_basemap.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Basemap — get_basemap","title":"Get Basemap — get_basemap","text":"Get Basemap","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/get_basemap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Basemap — get_basemap","text":"","code":"get_basemap(spdf, terr, country = NULL, add_admins = FALSE)"},{"path":"https://usaid-oha-si.github.io/gisr/reference/get_basemap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Basemap — get_basemap","text":"spdf PEPFAR ORGs Spatial Data terr RasterLayer country OU Country Name add_admins sub-admins added? Default false","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/get_basemap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Basemap — get_basemap","text":"","code":"ggplot plot of base map"},{"path":"https://usaid-oha-si.github.io/gisr/reference/get_basemap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Basemap — get_basemap","text":"","code":"if (FALSE) { library(gisr) library(sf)   shp <- get_pepfar_shp(shp_path = glamr::si_path(\"path_vector\"), add_attr = TRUE)  ras <- get_raster(terr_path = glamr::si_path(\"path_raster\"))   get_basemap(spdf = shp, country = \"Nigeria\", terr = ras) }"},{"path":"https://usaid-oha-si.github.io/gisr/reference/get_grids.html","id":null,"dir":"Reference","previous_headings":"","what":"Create square grids — get_grids","title":"Create square grids — get_grids","text":"Create square grids","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/get_grids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create square grids — get_grids","text":"","code":"get_grids(spdf, size = 15000, clip = TRUE)"},{"path":"https://usaid-oha-si.github.io/gisr/reference/get_grids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create square grids — get_grids","text":"spdf input spatial data frame size size hex bin meters, default set 15K meters (15KM) clip output cliped input boundaries? Default TRUE","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/get_grids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create square grids — get_grids","text":"country hex polygon feature class","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/get_grids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create square grids — get_grids","text":"","code":"if (FALSE) {  library(gisr)   shp <- get_admin0(countries = \"Nigeria\")   get_grids(shp, 10000) }"},{"path":"https://usaid-oha-si.github.io/gisr/reference/get_hexbins.html","id":null,"dir":"Reference","previous_headings":"","what":"Create hexagonal grids — get_hexbins","title":"Create hexagonal grids — get_hexbins","text":"Create hexagonal grids","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/get_hexbins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create hexagonal grids — get_hexbins","text":"","code":"get_hexbins(spdf, size = 15000, clip = TRUE)"},{"path":"https://usaid-oha-si.github.io/gisr/reference/get_hexbins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create hexagonal grids — get_hexbins","text":"spdf input spatial data frame size size hex bin meters, default set 15K meters (15KM) clip output cliped input boundaries? Default TRUE","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/get_hexbins.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create hexagonal grids — get_hexbins","text":"country hex polygon feature class","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/get_hexbins.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create hexagonal grids — get_hexbins","text":"","code":"if (FALSE) {  library(gisr)   shp <- get_admin0(countries = \"Nigeria\")   get_hexbins(shp, 10000) }"},{"path":"https://usaid-oha-si.github.io/gisr/reference/get_nepolygons.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Natural Earth Polygons — get_nepolygons","title":"Get Natural Earth Polygons — get_nepolygons","text":"Get Natural Earth Polygons","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/get_nepolygons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Natural Earth Polygons — get_nepolygons","text":"","code":"get_nepolygons(   scale = c(\"large\", \"small\", \"medium\"),   type = c(\"countries\", \"map_units\", \"sovereignty\", \"tiny_countries\") )"},{"path":"https://usaid-oha-si.github.io/gisr/reference/get_nepolygons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Natural Earth Polygons — get_nepolygons","text":"scale Scale map - options 'large', 'small', 'medium' type country type - options 'countries', 'map_units', 'sovereignty', 'tiny_countries'","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/get_nepolygons.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Natural Earth Polygons — get_nepolygons","text":"world countries sf object","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/get_nepolygons.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Natural Earth Polygons — get_nepolygons","text":"","code":"if (FALSE) {  library(gisr)   shp_ne <- get_nepolygons()  shp_ne <- get_nepolygons(scale = \"large\", type = \"countries\") }"},{"path":"https://usaid-oha-si.github.io/gisr/reference/get_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Terrain Raster dataset — get_raster","title":"Get Terrain Raster dataset — get_raster","text":"Get Terrain Raster dataset","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/get_raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Terrain Raster dataset — get_raster","text":"","code":"get_raster(folderpath, name = NULL, rename = FALSE, ...)"},{"path":"https://usaid-oha-si.github.io/gisr/reference/get_raster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Terrain Raster dataset — get_raster","text":"folderpath Path raster file, default si_path('path_raster') name Name raster file (extension), default set terrain raster SR_LR.tif rename RasterLayer renamed? yes, name changed value ... Additional arguments passed base::list.files. Eg: Use ignore.case = TRUE non case sensitive search","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/get_raster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Terrain Raster dataset — get_raster","text":"RasterLayer","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/get_raster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Terrain Raster dataset — get_raster","text":"","code":"if (FALSE) {  library(glamr)  library(gisr)   get_raster()   get_raster(name = \"sample.tif\")  get_raster(path = \"./geodata/raster\", name = \"sample.tif\") }"},{"path":"https://usaid-oha-si.github.io/gisr/reference/get_terrain.html","id":null,"dir":"Reference","previous_headings":"","what":"Get terrain data for an AOI (Countries) — get_terrain","title":"Get terrain data for an AOI (Countries) — get_terrain","text":"Get terrain data AOI (Countries)","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/get_terrain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get terrain data for an AOI (Countries) — get_terrain","text":"","code":"get_terrain(countries, terr, mask = FALSE, buffer = 0.1)"},{"path":"https://usaid-oha-si.github.io/gisr/reference/get_terrain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get terrain data for an AOI (Countries) — get_terrain","text":"countries List country names sf object terr RasterLayer Path terrain raster file mask extracted data match exact boundary limits? buffer Extend AOI extent x","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/get_terrain.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get terrain data for an AOI (Countries) — get_terrain","text":"","code":"spdf spatial dataframe"},{"path":"https://usaid-oha-si.github.io/gisr/reference/get_terrain.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get terrain data for an AOI (Countries) — get_terrain","text":"get_terrain() evantually replaced extract_raster()","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/get_terrain.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get terrain data for an AOI (Countries) — get_terrain","text":"","code":"if (FALSE) {  library(gisr)  library(sf)   get_terrain(countries = list(\"Zambia\"))  get_terrain(countries = list(\"Zambia\"), mask = TRUE)  get_terrain(countries = list(\"Zambia\"), buffer = .5, terr = \"../../HDX_Data\") }"},{"path":"https://usaid-oha-si.github.io/gisr/reference/get_vcpolygons.html","id":null,"dir":"Reference","previous_headings":"","what":"Get PEPFAR Visual Crossing Polygons — get_vcpolygons","title":"Get PEPFAR Visual Crossing Polygons — get_vcpolygons","text":"Get PEPFAR Visual Crossing Polygons","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/get_vcpolygons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get PEPFAR Visual Crossing Polygons — get_vcpolygons","text":"","code":"get_vcpolygons(folderpath, name = NULL)"},{"path":"https://usaid-oha-si.github.io/gisr/reference/get_vcpolygons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get PEPFAR Visual Crossing Polygons — get_vcpolygons","text":"folderpath Path PEPFAR Global Shapefile name Name pattern shapefile","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/get_vcpolygons.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get PEPFAR Visual Crossing Polygons — get_vcpolygons","text":"sf object","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/get_vcpolygons.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get PEPFAR Visual Crossing Polygons — get_vcpolygons","text":"","code":"if (FALSE) {  library(gisr)   shp_pepfar <- get_vcpolygons()  shp_pepfar <- get_vcpolygons(folderpath = glamr::si_path(\"path_vector\"))  shp_pepfar <- get_vcpolygons(folderpath = \"./GIS\", name = \"VcPepfarPolygons.shp\") }"},{"path":"https://usaid-oha-si.github.io/gisr/reference/gview.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot sf features — gview","title":"Plot sf features — gview","text":"Plot sf features","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/gview.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot sf features — gview","text":"","code":"gview(geodata, ...)"},{"path":"https://usaid-oha-si.github.io/gisr/reference/gview.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot sf features — gview","text":"geodata spatial data sf object ... arguments passed geom_sf","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/gview.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot sf features — gview","text":"","code":"if (FALSE) {  library(gisr)   adm0 <- get_admin0(\"Ghana\")   adm0 %>%   dplyr::select(name) %>%   gview() }"},{"path":"https://usaid-oha-si.github.io/gisr/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://usaid-oha-si.github.io/gisr/reference/spdf_export.html","id":null,"dir":"Reference","previous_headings":"","what":"Export spatial data as shapefile with flags — spdf_export","title":"Export spatial data as shapefile with flags — spdf_export","text":"Export spatial data shapefile flags","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/spdf_export.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export spatial data as shapefile with flags — spdf_export","text":"","code":"spdf_export(spdf, name)"},{"path":"https://usaid-oha-si.github.io/gisr/reference/spdf_export.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export spatial data as shapefile with flags — spdf_export","text":"spdf sf object name filename full path","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/spdf_export.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export spatial data as shapefile with flags — spdf_export","text":"boolean","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/spdf_export.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export spatial data as shapefile with flags — spdf_export","text":"","code":"if (FALSE) {  library(gisr)  library(sf)   shp <- get_admin0(countries = \"Nigeria\")   export_spdf(spdf = shp, name = \"./GIS/nga_country_boundaries\")  export_spdf(spdf = shp, name = \"./GIS/nga_country_boundaries.shp\") }"},{"path":"https://usaid-oha-si.github.io/gisr/reference/spdf_points.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Point Spatial DataFrame — spdf_points","title":"Generate Point Spatial DataFrame — spdf_points","text":"Generate Point Spatial DataFrame","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/spdf_points.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Point Spatial DataFrame — spdf_points","text":"","code":"spdf_points(.data, lat = \"latitude\", long = \"longitude\", crs = 4326)"},{"path":"https://usaid-oha-si.github.io/gisr/reference/spdf_points.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Point Spatial DataFrame — spdf_points","text":".data Location data data frame, use extract_facilities lat Column name latitude, default value latitude long Column name longitude, default value longitude crs Coordinate Reference System, default value EPSG Code WGS 1984","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/spdf_points.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Point Spatial DataFrame — spdf_points","text":"list spatial data frames","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/spdf_points.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Point Spatial DataFrame — spdf_points","text":"","code":"if (FALSE) {  cntry <- \"Ethiopia\" level_fac <- grabr::get_ouorglevel(operatingunit = cntry, org_type = \"facility\") df_facs <- extract_locations(country = cntry, level = level_fac) df_facs <- df_facs %>% extract_facilities() df_locs <- df_facs %>% select(-c(geom_type:nested))  spdf <- spdf_points(.data = df_locs) }"},{"path":"https://usaid-oha-si.github.io/gisr/reference/terrain_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a terrain map — terrain_map","title":"Generate a terrain map — terrain_map","text":"Generate terrain map","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/terrain_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a terrain map — terrain_map","text":"","code":"terrain_map(   countries,   adm0 = NULL,   adm1 = NULL,   add_neighbors = FALSE,   add_labels = FALSE,   mask = FALSE,   terr = NULL )"},{"path":"https://usaid-oha-si.github.io/gisr/reference/terrain_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a terrain map — terrain_map","text":"countries List countries map adm0 Admin 0 boundaries, optional sf geodata adm1 Admin 1 boundaries, optional sf geodata add_neighbors map include neighbor countries add_labels Add neighbors countries's names (works add_neighbors TRUE) mask extracted data match exact boundary limits? terr RasterLayer dataset Path terrain raster file","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/terrain_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a terrain map — terrain_map","text":"ggplot basemap","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/terrain_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a terrain map — terrain_map","text":"","code":"if (FALSE) { library(gisr) gisr::terrain_map(countries = list(\"Zambia\")) gisr::terrain_map(countries = list(\"Zambia\"), add_neighbors = TRUE) }"},{"path":"https://usaid-oha-si.github.io/gisr/reference/zip_shapefiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Compress all shapefile components into a zipped file — zip_shapefiles","title":"Compress all shapefile components into a zipped file — zip_shapefiles","text":"Compress shapefile components zipped file","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/zip_shapefiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compress all shapefile components into a zipped file — zip_shapefiles","text":"","code":"zip_shapefiles(filename, folderpath = NULL)"},{"path":"https://usaid-oha-si.github.io/gisr/reference/zip_shapefiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compress all shapefile components into a zipped file — zip_shapefiles","text":"filename Shapefile full path name folderpath place zipped files","code":""},{"path":"https://usaid-oha-si.github.io/gisr/reference/zip_shapefiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compress all shapefile components into a zipped file — zip_shapefiles","text":"","code":"Boolean"},{"path":"https://usaid-oha-si.github.io/gisr/news/index.html","id":"gisr-040","dir":"Changelog","previous_headings":"","what":"gisr 0.4.0","title":"gisr 0.4.0","text":"Soft depreciation extact_locations - recommend using grabr::datim_pull_hierarchy Updated extract_facilities - dropping mer_sites parameter Updated extract_boundaries - leveraging grabr::get_ouorgs + clean Updated get_attributes - switched datim_orgunits adding new params: search, baseurl Updated extract_attributes - switching datim_orgunits use prefix Updated zip_shapefiles - switch folderpath instead dest_folder Adding check_columns() shapefile column names restrictions Updated get_terrain, extract_raster, get_raster use folderpath required Replaced raster terra per maintenance recommendation Removed sp favor sf per maintenance recommendation Removed get_adm_boundaries given depreciation raster Updated geo_neighbors require source external dataset Adding get_nepolygons common way extracting naturalearth database Adding get_grids square grids, similar get_hexbins Updated get_hexbins require spdf input + radius Remove generate_hexbins - use get_hexbins instead","code":""},{"path":"https://usaid-oha-si.github.io/gisr/news/index.html","id":"gisr-030","dir":"Changelog","previous_headings":"","what":"gisr 0.3.0","title":"gisr 0.3.0","text":"Removed duplicative functions grabr [2023-11-30] Update functions use baseurl folderpath parameter General clean documentation","code":""},{"path":"https://usaid-oha-si.github.io/gisr/news/index.html","id":"gisr-022","dir":"Changelog","previous_headings":"","what":"gisr 0.2.2","title":"gisr 0.2.2","text":"Change instructions install rOpenSci [2024-01-04] Add package status check gagglr load [2022-08-15] Improvement documentation utility functions Updated vignette Geodata extraction Updated attributes() convert geodata sf object extracting data cntry_polygons() extract boundaries specific country named list spdf_points() generate point spatial data frame spdf_export() redirect export_spdf() column length checks","code":""},{"path":"https://usaid-oha-si.github.io/gisr/news/index.html","id":"gisr-021","dir":"Changelog","previous_headings":"","what":"gisr 0.2.1","title":"gisr 0.2.1","text":"Improvement documentation utility functions Adding vignettes package site attributes() extract attributes sf object get_raster() read terrain raster file raster file get_attributes() extract OU/Country orgunits attributes VcPolygons extract_boundaries() extract specific boundaries VcPolygons extract_roads extract road networks osm repository export_spdf() export sf objects shapefiles extract_raster extract raster AOI zip_shapefiles() compress shapefile component zipped file download_shapefeles() download compressed shapefiles googledrive","code":""},{"path":"https://usaid-oha-si.github.io/gisr/news/index.html","id":"gisr-020","dir":"Changelog","previous_headings":"","what":"gisr 0.2.0","title":"gisr 0.2.0","text":"Improvement basemap functions: crop neighbor countries, add labels demand Sample code extract country boundaries PEPFAR Polygons Read tiff file RasterLayer, get_raster() Identify org levels country/orgunit, get_ouorglevel() Get list uids ou level x, get_ouleveluids() Get list orgunits uids, get_orguids()","code":""},{"path":"https://usaid-oha-si.github.io/gisr/news/index.html","id":"gisr-010","dir":"Changelog","previous_headings":"","what":"gisr 0.1.0","title":"gisr 0.1.0","text":"Improvement basemap functions: crop neighbor countries Parse PEPFAR OrgHierarchy features Adoption SI Style Guide","code":""},{"path":"https://usaid-oha-si.github.io/gisr/news/index.html","id":"gisr-0009000","dir":"Changelog","previous_headings":"","what":"gisr 0.0.0.9000","title":"gisr 0.0.0.9000","text":"Initial set geosptial utility functions Get country admin 1 boundaries sf features, get_admin1(countries = \"Togo\") Create basemap terrain raster data, terrain_map()","code":""}]
